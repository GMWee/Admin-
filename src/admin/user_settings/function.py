from aiogram import Router
from aiogram.types import Message, CallbackQuery

import datetime

from src.base.database import DATABASE
from src.base.utils import get_user_subscription
from src.admin.user_settings import admin_settings_menu_keyboard as kb
from typing import Union


router = Router()

class Settings:
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏"""
	async def role_message(self, message: Message):
		user_id = message.from_user.id
		user = await DATABASE.get_or_create_user(user_id, False)
		if user[3] < 1:
			return False
		else:
			return True

	async def role_callback(self, callback: CallbackQuery):
		user_id = callback.from_user.id
		user = await DATABASE.get_or_create_user(user_id, False)
		if user[3] < 1:
			return False
		else:
			return True


	"""–û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é"""
	async def open_menu(self, context: Union[Message, CallbackQuery]):
		"""–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
		text = '*User menu settings:*'
		if isinstance(context, Message):
			await context.answer(text, reply_markup=kb.menu, parse_mode="Markdown")
		elif isinstance(context, CallbackQuery):
			if context.message:
				try:
					await context.message.edit_text(text, reply_markup=kb.menu, parse_mode="Markdown")
				except Exception as e:
					print(f"Error editing message: {e}")
					await context.message.answer(text, reply_markup=kb.menu, parse_mode="Markdown")
			await context.answer()


	async def settings_chat(self, callback: CallbackQuery):
		from src.admin.user_settings.settings import ID_STORAGE
		"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
		user_id = ID_STORAGE.id
		if user_id == 0:
			await callback.message.edit_text("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setid.",
											 parse_mode="Markdown")
			await callback.answer()
			return

		user = await DATABASE.get_or_create_user(user_id)
		if not user:
			await callback.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID '{user_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
			await callback.answer()
			return

		sub = get_user_subscription(user)
		sub_info = await DATABASE.get_subscription(sub)
		sub_models = await DATABASE.get_subscription_models(sub)
		current_model = await DATABASE.get_model(user[4])
		cred = user[5]

		text = f"*‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '{ID_STORAGE.id}'*\n\n"
		text += f"‚Äî *–ü–æ–¥–ø–∏—Å–∫–∞*: {sub_info[1]}\n"
		text += f"‚Äî *–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å*: {current_model[1]}\n"
		text += f"‚Äî *–ë–∞–ª–∞–Ω—Å:* {user[11]}‚≠êÔ∏è\n"
		text += f"‚Äî *–ö—Ä–µ–¥–∏—Ç—ã*: _{cred}üíé / {sub_info[2]}üíé_\n"
		if sub_info[4] == 0:
			text += f"‚Äî *–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*\n\n"
		else:
			text += f"‚Äî *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ*: _{sub_info[4]}üíé_\n\n"

		text += f"‚Äî *Admin‚ÄºÔ∏è\n*" if user[3] >= 1 else "‚Äî *User*\n"
		text += "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"

		for mod_tuple in sub_models:
			model = await DATABASE.get_model(mod_tuple[0])
			text += f"‚Äî {model[1]}\n"

		await callback.message.edit_text(text, reply_markup=kb.back_to_settings, parse_mode="Markdown")
		await callback.answer()


	async def set_settings(self, callback: CallbackQuery):
		"""–í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
		await callback.message.edit_reply_markup(reply_markup=kb.settings, parse_mode="Markdown")
		await callback.answer()


	async def set_sub(self, callback: CallbackQuery):
		"""–°–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
		await callback.message.edit_reply_markup(reply_markup=kb.sub_version, parse_mode="Markdown")
		await callback.answer()


	async def sub_update(self, telegram_id: int, sub_id: int):
		"""–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
		dt = datetime.datetime.now() + datetime.timedelta(days=28)
		await DATABASE.set_user_subscription(telegram_id, sub_id, dt.timestamp())
		si = await DATABASE.get_subscription(sub_id)
		await DATABASE.set_credits_info(telegram_id, si[2], 0)

	async def ban(self, telegram_id: int, num: int, callback: CallbackQuery):
		"""–í—ã–¥–∞—Ç—å –±–∞–Ω/—Ä–∞–∑–±–∞–Ω"""
		await DATABASE.set_ban(num, telegram_id)
		text = '*–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–Ω–µ–Ω*‚úÖ' if num == 1 else '*–ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–∞–Ω–Ω–µ–Ω*‚úÖ'
		await callback.message.edit_text(text, reply_markup=kb.back_to_settings, parse_mode="Markdown")
		await callback.answer()

	async def user_role(self, callback: CallbackQuery):
		"""–ú–µ–Ω—é —Ä–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω–∞"""
		from src.admin.user_settings.settings import ID_STORAGE
		admin_id = callback.from_user.id
		role_admin = await DATABASE.get_or_create_user(admin_id, False)
		print(role_admin)
		role_user = await DATABASE.get_or_create_user(ID_STORAGE.id, False)
		if role_admin[3] == 1:
			await callback.message.edit_text('*–í–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π‚ùóÔ∏è\n –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏‚ùóÔ∏è*',
											 reply_markup=kb.back_to_settings, parse_mode="Markdown")
		elif role_admin[3] == 2:
			await callback.message.edit_text('*Set role from user*',
											 reply_markup=kb.role_2, parse_mode="Markdown")
		elif role_admin[3] == 3:
			await callback.message.edit_text('*Set role from user*',
											 reply_markup=kb.role_3, parse_mode="Markdown")


	async def set_role(self, callback: CallbackQuery, role: int):
		"""–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
		from src.admin.user_settings.settings import ID_STORAGE
		admin_id = callback.message.from_user.id
		role_admin = await DATABASE.get_or_create_user(admin_id, False)
		role_user = await DATABASE.get_or_create_user(ID_STORAGE.id, False)
		if role_admin[3] <= role_user[3]:
			await callback.message.edit_text("*–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚ùóÔ∏è\n–¢.–∫ –≤–∞—à —Ä–∞–Ω–≥ –Ω–∏–∂–µ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—á–µ–Ω‚ùóÔ∏è*‚úÖ",
											 reply_markup=kb.back_to_settings,parse_mode="Markdown")
		await DATABASE.set_role(role ,ID_STORAGE.id)
		await callback.message.edit_text("*–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞*‚úÖ", reply_markup=kb.back_to_settings, parse_mode="Markdown")
		await callback.answer()

	async def set_credits(self, message: Message, credits):
		"""–°–º–µ–Ω–∞ –∫–µ—Ä–¥–∏—Ç–æ–≤"""
		from src.admin.user_settings.settings import ID_STORAGE
		await DATABASE.set_credits_info(ID_STORAGE.id, credits, 0)
		await message.answer(f"*–í—ã–¥–∞–Ω–Ω–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤*",reply_markup = kb.back_to_settings , parse_mode="Markdown")
		
	async def set_balance(self, message: Message, sum):
		"""–°–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
		from src.admin.user_settings.settings import ID_STORAGE
		await DATABASE.set_user_balance(ID_STORAGE.id, sum)
		await message.answer(f"*–í—ã–¥–∞–Ω–Ω–æ {sum} –∑–≤–µ–∑–¥*",reply_markup = kb.back_to_settings , parse_mode="Markdown")

SETTINGS = Settings()